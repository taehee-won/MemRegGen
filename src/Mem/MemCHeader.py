from typing import List

from memgen import name, version

from inc import WriteFile, Str, HexStr, NotExpectedError

from src.Mem.MemGen import MemGen
from src.Mem.MemConfig import MemConfig
from src.Mem.MemDef import MemDef


class MemCHeader(MemGen):
    name: str = "Memory C Header"

    def __init__(self, memdef: MemDef, config: MemConfig) -> None:
        self._memdef = memdef
        self._config = config

        self._contents = ""

    def generate(self, file: WriteFile) -> None:
        self._set_address_rows()
        self._set_array_rows()
        self._set_alias_rows()
        self._set_bookmark_rows()

        self._append_note_header()
        self._append_open_header_guard()
        self._append_includes()

        self._append_address_section()
        self._append_array_section()
        self._append_alias_section()
        self._append_bookmark_section()

        self._append_close_header_guard()

        self._write(file)

    def _set_address_rows(self) -> None:
        self._address_rows = []

        for address in self._memdef.addresses:
            self._address_rows.append(
                [
                    "#define",
                    self._name(address.name),
                    address.address,
                    "",
                ]
            )

        for array in self._memdef.arrays:
            for address in array.addresses:
                self._address_rows.append(
                    [
                        "#define",
                        self._name(address.name),
                        address.address,
                        f"// {self._name(array.name)}",  # ({self._config.array})
                    ]
                )

        self._address_rows.sort(key=lambda row: row[2].value)

        for row in self._address_rows:
            row[2] = self._address(row[2])

    def _set_array_rows(self) -> None:
        self._array_rows = []

    def _set_alias_rows(self) -> None:
        self._alias_rows = []

    def _set_bookmark_rows(self) -> None:
        self._bookmark_rows = []

        for bookmark in self._memdef.bookmarks:
            for row in self._address_rows:
                if row[1] == self._name(bookmark.bookmark):
                    if len(row) == 4:
                        row.append(f"// {self._name(bookmark.name)}")

                    else:
                        row[4] += f", {self._name(bookmark.name)}"

                    break

            else:
                raise NotExpectedError(
                    f"Not Exist, Bookmark({self._name(bookmark.bookmark)})"
                )

            self._bookmark_rows.append(
                [
                    "#define",
                    self._name(bookmark.name),
                    self._name(bookmark.bookmark),
                ]
            )

        def bookmark_index(bookmark_row):
            for index, row in enumerate(self._address_rows):
                if row[1] == bookmark_row[2]:
                    return index

            raise NotExpectedError(f"Not Exist, Bookmark({bookmark_row[2]})")

        self._bookmark_rows.sort(key=bookmark_index)

    def _name(self, name: str) -> str:
        return f"{self._config.prefix}{name}{self._config.postfix}"

    def _address(self, address: HexStr) -> str:
        prefix = "UL(" if self._config.bits == 64 else ""
        postfix = ")" if self._config.bits == 64 else ""

        return f"{prefix}{address.get_aligned(self._config.align)}{postfix}"

    def _append(self, c: str) -> None:
        self._contents += c + "\n"

    def _append_str(self, s: Str) -> None:
        self._append(s.contents)

    def _append_note_header(self) -> None:
        self._append(f"// Do not edit!")
        self._append(f"// This is generated by {name} {version}")
        self._append(f"// MemDef hash({self._memdef.file.hash})")

    def _append_open_header_guard(self) -> None:
        guard = self._config.guard + "_H"

        self._append("")
        self._append(f"#ifndef {guard}")
        self._append(f"#define {guard}")

    def _append_includes(self) -> None:
        self._append("")
        self._append("#include <const.h>")

    def _append_section_header(self, section: str) -> None:
        self._append("")
        self._append_str(Str(section).add_guard("=").add_prefix("// "))

    def _append_address_section(self) -> None:
        self._append_section_header("Address Section")

        self._append("")
        self._append_str(Str.from_rows(self._address_rows))

    def _append_array_section(self) -> None:
        self._append_section_header("Array Section")

    def _append_alias_section(self) -> None:
        self._append_section_header("Alias Section")

    def _append_bookmark_section(self) -> None:
        self._append_section_header("Bookmark Section")

        self._append("")
        self._append_str(Str.from_rows(self._bookmark_rows))

    def _append_close_header_guard(self) -> None:
        guard = self._config.guard + "_H"

        self._append("")
        self._append(f"#endif // {guard}")

    def _write(self, file: WriteFile) -> None:
        file.write(self._contents)
