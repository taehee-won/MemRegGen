from typing import Optional, Union
from pktgen import name, version

from inc import WriteFile, Str, HexStr, IntStr

from src.Pkt.PktGen import PktGen
from src.Pkt.PktConfig import PktConfig
from src.Pkt.PktDef import PktDef, Packet, Group


class PktCHeader(PktGen):
    name: str = "Packet C Header"

    def __init__(self, pktdef: PktDef, config: PktConfig) -> None:
        self._pktdef = pktdef
        self._config = config

        self._items = self._pktdef.items

        self._contents = ""

    def generate(self, file: WriteFile) -> None:
        self._set_annotation_rows()

        self._append_note_header()
        self._append_open_header_guard()
        self._append_includes()

        if self._config.annotation:
            self._append_annotation()

        self._append_packets()

        self._append_close_header_guard()

        self._write(file)

    def _set_annotation_rows(self) -> None:
        self._annotation_rows = []

    def _append(self, c: str) -> None:
        self._contents += c + "\n"

    def _append_str(self, s: Str) -> None:
        self._append(str(s))

    def _append_note_header(self) -> None:
        self._append(f"// Do not edit!")
        self._append(f"// This is generated by {name} {version}")
        self._append(f"// PktDef hash({self._pktdef.file.hash})")

        if self._config.notes:
            self._append("")
            self._append_str(Str(self._config.notes).add_prefix("// "))

    def _append_open_header_guard(self) -> None:
        guard = self._config.guard + "_H"

        self._append("")
        self._append(f"#ifndef {guard}")
        self._append(f"#define {guard}")

    def _append_includes(self) -> None:
        self._append("")
        self._append("#include <const.h>")

    def _append_annotation(self) -> None:
        if self._items:
            self._append("")

            rows = []
            rows.append(
                [
                    "//",
                    "Group",
                    "|",
                    "Packet",
                    "|",
                    "Fields",
                ]
            )

            for item in self._items:
                if isinstance(item, Packet):
                    rows.append(
                        [
                            "//",
                            "",
                            "|",
                            f"{item.name}",
                            "|",
                            ", ".join(field.name for field in item.fields),
                        ]
                    )

                elif isinstance(item, Group):
                    for packet in item.packets:
                        rows.append(
                            [
                                "//",
                                item.name,
                                "|",
                                self._join(item.name, packet.name),
                                "|",
                                ", ".join(field.name for field in packet.fields),
                            ]
                        )

            self._append_str(Str.from_rows(rows))

    def _append_group_header(self, group: str) -> None:
        self._append("")
        self._append_str(Str(group).add_guard("*").add_prefix("// "))

    def _append_packet_header(self, group: str) -> None:
        self._append("")
        self._append_str(Str(group).add_guard("=").add_prefix("// "))

    def _append_packet(self, packet: Packet, group: Optional[str] = None) -> None:
        packet_name = self._join(group, packet.name) if group else packet.name

        self._append_packet_header(
            f"{packet_name}"
            + (
                f" : {', '.join(field.name for field in packet.fields)}"
                if packet.fields
                else ""
            )
        )

        if packet.fields:
            for field in packet.fields:
                field_name = self._join(packet_name, field.name)

                self._append("")
                self._append(f"// {self._name(field_name)}")

                self._append("")
                self._append_str(
                    Str.from_rows(
                        [
                            [
                                "#define",
                                self._name(field_name, self._config.mask),
                                self._value(
                                    (1 << (field.bits[0] - field.bits[1] + 1)) - 1
                                ),
                            ],
                            [
                                "#define",
                                self._name(field_name, self._config.shift),
                                f"( {field.bits[1]} )",
                            ],
                        ]
                    )
                )

                if field.enums:
                    self._append("")
                    self._append_str(
                        Str.from_rows(
                            [
                                [
                                    "#define",
                                    self._name(field_name, enum.name),
                                    f"( {enum.value.value} )",
                                ]
                                for enum in field.enums
                            ]
                        )
                    )

                    self._append("")
                    self._append_str(
                        Str.from_rows(
                            [
                                [
                                    "#define",
                                    self._name(field_name, enum.name, self._config.raw),
                                    self._value(enum.value.value << field.bits[1]),
                                ]
                                for enum in field.enums
                            ]
                        )
                    )

            self._append("")
            self._append(f"// {self._name(packet_name, self._config.raw)}")

            self._append("")
            self._append_str(
                Str.from_rows(
                    [
                        [
                            "#define",
                            f"{self._name(packet_name, field.name, self._config.raw)}({field.name.lower()})",
                            f"( ( {field.name.lower()}",
                            "&",
                            self._name(packet_name, field.name, self._config.mask),
                            ") <<",
                            self._name(packet_name, field.name, self._config.shift),
                            ")",
                        ]
                        for field in packet.fields
                    ]
                )
            )

            self._append("")
            self._append(
                f"#define {self._name(packet_name, self._config.raw)}"
                + f"({', '.join(field.name.lower() for field in packet.fields)})"
                + f" ( {' | '.join(f'{self._name(packet_name, field.name, self._config.raw)}({field.name.lower()})' for field in packet.fields)} )"
            )

        else:
            self._append("")
            self._append(f"// {self._join(packet_name, self._config.raw)} : NO FIELD")

            self._append("")
            self._append_str(
                Str.from_rows(
                    [
                        [
                            "#define",
                            self._name(packet_name, f"{self._config.raw}()"),
                            self._value(0),
                        ]
                    ]
                )
            )

    def _append_packets(self) -> None:
        for item in self._items:
            if isinstance(item, Packet):
                self._append_packet(item)

            elif isinstance(item, Group):
                self._append_group_header(
                    f"{item.name}"
                    + (
                        f" : {', '.join(packet.name for packet in item.packets)}"
                        if item.packets
                        else ""
                    )
                )

                for packet in item.packets:
                    self._append_packet(packet, group=item.name)

    def _append_close_header_guard(self) -> None:
        guard = self._config.guard + "_H"

        self._append("")
        self._append(f"#endif // {guard}")

    def _write(self, file: WriteFile) -> None:
        file.write(self._contents)

    def _join(self, *tokens) -> str:
        return "_".join(tokens)

    def _name(self, *tokens) -> str:
        return (f"{self._config.name}_" if self._config.name else "") + "_".join(tokens)

    def _value(self, value: Union[HexStr, IntStr, int]) -> str:
        if isinstance(value, IntStr):
            value = HexStr.from_int(value.value)

        elif isinstance(value, int):
            value = HexStr.from_int(value)

        return f"UL({value.get_aligned(8)})"
